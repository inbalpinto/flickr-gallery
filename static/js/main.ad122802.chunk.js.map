{"version":3,"sources":["ImageGalleryApp.js","serviceWorker.js","index.js","assets/magnifying-glass.svg"],"names":["Image","props","react_default","a","createElement","className","alt","src","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","delayKeyPress","timer","callback","ms","clearTimeout","setTimeout","state","images","searchText","page","flickrURL","fetch","then","response","json","j","imgArray","photos","photo","map","img","i","srcPath","farm","server","id","secret","key","generateKey","index","setState","bind","catch","ex","console","log","e","target","value","relodeImages","_this2","href","rel","type","placeholder","onChange","handleSearchInputChange","onKeyUp","keyCode","length","onClick","handleSearchClick","searchIcon","Component","pre","slice","Date","getTime","filter","Boolean","join","window","location","hostname","match","ReactDOM","render","src_ImageGalleryApp","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ad122802.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport searchIcon from './assets/magnifying-glass.svg';\nimport './stylesheets/ImageGalleryApp.scss';\n\nfunction Image(props) {\n  return (\n    <div className=\"imageWrapper\">\n      <img className=\"image\" alt=\"gallery\" src={props.src} />\n    </div>\n  );\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: [],\n      searchText: \"\",\n      page: 1,\n    };\n  }\n\n  relodeImages() {\n    const APIKey = 'bac9f1ccfd854f27894fd47c4f01b1e8'; // privacy\n    const flickrURL = \"https://api.flickr.com/services/rest/?method=flickr.photos.search&safe_search=1&format=json&nojsoncallback=1&api_key=\" + APIKey + \"&content_type=1&is_getty=1&page=\" + this.state.page + \"&text=\" + this.state.searchText;\n\n    fetch(flickrURL)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (j) {\n        let imgArray = j.photos.photo.map((img, i) => {\n          let srcPath = 'https://farm' + img.farm + '.staticflickr.com/' + img.server + '/' + img.id + '_' + img.secret + '.jpg';\n\n          return <Image\n            key={generateKey(\"img_wrapper\", i)}\n            src={srcPath}\n            index={i} />;\n\n        });\n        this.setState({ images: imgArray });\n      }.bind(this))\n      .catch(function (ex) {\n        console.log('failed', ex)\n      });\n  }\n\n\n  handleSearchInputChange(e) {\n    this.setState({ searchText: e.target.value });\n  }\n\n  delayKeyPress = (function () {\n    let timer = 0;\n    return function (callback, ms) {\n      clearTimeout(timer);\n      timer = setTimeout(callback, ms);\n    };\n  })();\n\n  handleSearchClick() {\n    // this.relodeImages();\n  }\n\n\n  componentDidMount() {\n    this.relodeImages();\n  }\n\n  render() {\n    return (\n      <div className=\"imageGalleryApp\">\n        <header className=\"galleryHeader\">\n          <a className=\"appLogo\" href=\"https://venn.city/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img className=\"vennLogo\" alt=\"\" src=\"https://venn.city/wp-content/uploads/elementor/thumbs/venn_logo_green-o0yceabxc1wkhlc95igjcpab509we8breb5p4fyffi.png\" />\n            <span className=\"appTitle\">gallery</span>\n          </a>\n          <div className=\"searchBar\">\n            <input type=\"text\" className=\"searchInput\" placeholder=\"&nbsp;\"\n              onChange={this.handleSearchInputChange.bind(this)}\n              onKeyUp={(e) => {\n                const ms = (e.keyCode === 13 ? 0 : 200);\n                this.delayKeyPress(function () {\n                  this.relodeImages(); \n                }.bind(this), ms)\n              }}></input>\n            <span className=\"label\">Search</span>\n            <button className={\"searchBtn\" + (this.state.searchText.length !== 0 ? \" notEmpty\" : \"\")} onClick={this.handleSearchClick.bind(this)}>\n              <img src={searchIcon} className=\"searchIcon\" alt=\"logo\" />\n            </button>\n            <span className=\"underline\" />\n          </div>\n        </header>\n        <div className=\"galleryContainer\">\n          {this.state.images}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nfunction generateKey(pre, i) {\n  const formattedIndex = (\"00\" + i).slice(-3);\n  return [pre, formattedIndex, new Date().getTime()].filter(Boolean).join(\"_\");\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ImageGalleryApp from './ImageGalleryApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ImageGalleryApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/magnifying-glass.876cc104.svg\";"],"sourceRoot":""}